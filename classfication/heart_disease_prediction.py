# -*- coding: utf-8 -*-
"""heart_disease_prediction

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15l4ZoBKfqOZMjNoj-WEHTo30WJ2cI_my
"""

import pandas as pd
import  numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

df=pd.read_csv('dataset.csv')
df.head(5)

df.corr()['target'].sort_values(ascending=True)*10

num_col=df.drop('target',axis=1).columns
for col in num_col:
  plt.figure(figsize=(6,3))
  plt.title(f"{col} Distribution")
  sns.boxplot(df[col])
  plt.show()

for col in ['cholesterol','resting bp s','oldpeak']:
  q1,q3=df[col].quantile(0.25),df[col].quantile(0.75)
  iqr=q3-q1
  upper_bound=q3+1.5*iqr
  lower_bound=q1-1.5*iqr
  df[col]=df[col].apply(lambda x:
                        upper_bound if x > upper_bound else(lower_bound if x< lower_bound else x))

df.head(0)
for col in ['cholesterol','resting bp s','oldpeak']:
  plt.figure(figsize=(6,3))
  plt.title(f"{col} Distribution")
  sns.boxplot(df[col])
  plt.show()

for col in num_col:
  plt.figure(figsize=(6,3))
  plt.title(f"{col} Distribution")
  sns.histplot(df[col],kde=1)
  plt.show()

df.corr()['target'].sort_values(ascending=True)

# df.drop('resting ecg',axis=1,inplace=True)
# from sklearn.preprocessing import standardscaler
x,y=df.drop('target',axis=1),df['target']
from sklearn.preprocessing import StandardScaler
ss=StandardScaler()
x_stand=ss.fit_transform(x)
# np.coe

from sklearn.model_selection import train_test_split,GridSearchCV
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import confusion_matrix,  ConfusionMatrixDisplay,classification_report
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.33,random_state=1)
model=LogisticRegression()
model.fit(x_train,y_train)
log_odds = model.coef_[0]
important=pd.Series(log_odds,index=x.columns)
# important
y_pred=model.predict(x_test)
confuse=confusion_matrix(y_test,y_pred)
result=ConfusionMatrixDisplay(confuse)
result.plot(cmap=plt.cm.Blues)

grid = {
    'C': [0.1, 1, 10, 100],
    'penalty': ['l1', 'l2'],
    'solver': ['liblinear']  # 'liblinear' supports both l1 and l2
}

cv=GridSearchCV(LogisticRegression(),param_grid=grid,cv=5,scoring='accuracy')
cv.fit(x_train,y_train)
y_pred=cv.predict(x_test)
confuse=confusion_matrix(y_test,y_pred)
result=ConfusionMatrixDisplay(confuse)
result.plot(cmap=plt.cm.Blues)

cv.best_params_

# df.corr()['target'].sort_values(ascending=True)
# df.drop(['max heart rate','cholesterol'],axis=1,inplace=True)